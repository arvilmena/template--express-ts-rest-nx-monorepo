---
import {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from 'astro';
import { cleanFloatingNumber } from '@myawesomeorg/utils';
export const getStaticPaths = (async () => {
  const days = await dayRepository.findAmount(365);
  const r = await Promise.all(
    days.map(async (d) => {
      const dayUrlParamString = luxonToManilaSqlFormat(d.dataAt);
      return {
        params: { dayUrlParamString },
      };
    }),
  );
  return r.flatMap((x) => x);
}) satisfies GetStaticPaths;
import {
  dayRepository,
  dailyCategoryRepository,
  crawlDataSwsCompanyRepository,
} from '@stonker/stonker';
import Layout from '../../../../layouts/base/Layout.astro';
import {
  dayUrlParamStringToLuxon,
  getCurrentManilaDate,
  luxonToManilaSqlFormat,
} from '@myawesomeorg/utils';
import { dailyCategoryToHumanReadable } from '@myawesomeorg/db';
import { DateTime } from 'luxon';
import CompanyDataTable from '../../../../components/CompanyDataTable.astro';
import CompanyTooltips from 'apps/frontend-astro/src/components/CompanyTooltips.astro';
const { dayUrlParamString } = Astro.params;

const swsCompanies = await crawlDataSwsCompanyRepository.getForDayByLuxon(
  dayUrlParamStringToLuxon(dayUrlParamString),
);
---

<Layout
  title={`All Stocks - ${dayUrlParamString}`}
  breadcrumb={[
    { title: 'Days', url: '/' },
    { title: dayUrlParamString, url: `/days/${dayUrlParamString}` },
    { title: 'Stocks', url: null },
    { title: 'All', url: `/days/${dayUrlParamString}/stocks/all` },
  ]}
  fullWidth={true}
>
  <!-- {category && <h1>{dailyCategoryToHumanReadable(category, false)}</h1>} -->

  <!-- <pre>{JSON.stringify(Object.keys(swsCompanies.toQuery), null, 2)}</pre> -->
  <!-- <pre>{JSON.stringify(swsCompanies, null, 2)}</pre> -->

  <!-- <pre>{dayUrlParamString} => {dayUrlParamStringToLuxon(dayUrlParamString).toMillis()}</pre> -->
  <CompanyDataTable companies={swsCompanies} />
  <CompanyTooltips companies={swsCompanies} />

  <!-- <button
    id="getDetails"
    class="inline-flex justify-center rounded-md bg-black/20 px-4 py-2 text-sm font-medium text-white hover:bg-black/30 focus:outline-none focus-visible:ring-2 focus-visible:ring-white/75"
    >Get Current Search builder query</button
  >
  <div id="getDetailsQuery"></div>
  <table id="myTable" class="display w-full">
    <thead>
      <tr>
        <th>swsUniqueSymbol</th>
        <th>lastUpdated</th>
        {
          /* <th>scoreValue</th>
              <th>scoreIncome</th>
              <th>scoreHealth</th>
              <th>scorePast</th>
              <th>scoreFuture</th>
              <th>scoreManagement</th>
              <th>scoreMisc</th> */
        }
        <th>scoreScoreTotal</th>
        <th>scoreSentence</th>
        <th>intrinsicValueDiscount</th>
        <th>dividendYield</th>
        <th>dividendYieldFuture</th>
        <th>pe</th>
        <th>peForward1y</th>
        <th>ps</th>
        <th>psForward1y</th>
        {/* <th>snowflakeColor</th> */}
        <th>sharePrice</th>
        <th>intrinsicValue</th>
        <th>intrinsicValueModel</th>
        <th>roe</th>
        <th>roeFuture3y</th>
        <th>priceTarget</th>
        <th>priceTargetAnalystCount</th>
        <th>priceTargetHigh</th>
        <th>priceTargetLow</th>
        <th>epsAnnualGrowthRate</th>
        <th>netIncomeAnnualGrowthRate</th>
        <th>peerPreferredComparison</th>
        <th>peerPreferredValue</th>
        <th>dividendPayoutRatio</th>
        <th>dividendPayoutRatio3Y</th>
        <th>dividendPayoutRatioMedian3Y</th>
        <th>dividendPaymentsGrowthAnnual</th>
        <th>dividendCashPayoutRatio</th>
        <th>leveredFreeCashFlowAnnualGrowth</th>
      </tr>
    </thead>
    {
      swsCompanies.length > 0 && (
        <tbody>
          {swsCompanies.map((c) => {
            return (
              <tr>
                <td>{c.crawl_data_sws_company.swsUniqueSymbol}</td>
                <td>
                  {luxonToManilaSqlFormat(
                    DateTime.fromMillis(
                      Number(c.crawl_data_sws_company.swsDataLastUpdated),
                    ),
                  )}
                </td>
                {/* <td>{c.crawl_data_sws_company.scoreValue}</td>
                    <td>{c.crawl_data_sws_company.scoreIncome}</td>
                    <td>{c.crawl_data_sws_company.scoreHealth}</td>
                    <td>{c.crawl_data_sws_company.scorePast}</td>
                    <td>{c.crawl_data_sws_company.scoreFuture}</td>
                    <td>{c.crawl_data_sws_company.scoreManagement}</td>
                    <td>{c.crawl_data_sws_company.scoreMisc}</td> */}
                <td>
                  {c.crawl_data_sws_company.scoreScoreTotal?.toCleanFloatingNumber()}
                </td>
                <td>{c.crawl_data_sws_company.scoreSentence}</td>
                <td
                  class:list={[
                    {
                      'text-green-600':
                        (c?.crawl_data_sws_company.intrinsicValueDiscount ??
                          0) > 0,
                    },
                  ]}
                >
                  {c.crawl_data_sws_company.intrinsicValueDiscount?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.dividendYield?.toCleanFloatingNumber()}
                </td>
                <td
                  class:list={[
                    {
                      'text-green-600':
                        (c?.crawl_data_sws_company.dividendYieldFuture ?? 0) >
                        (c?.crawl_data_sws_company.dividendYield ?? 0),
                    },
                  ]}
                >
                  {c.crawl_data_sws_company.dividendYieldFuture?.toCleanFloatingNumber()}
                </td>
                <td>{c.crawl_data_sws_company.pe?.toCleanFloatingNumber()}</td>
                <td
                  class:list={[
                    {
                      'text-green-600':
                        (c?.crawl_data_sws_company.peForward1y ?? 0) >
                        (c?.crawl_data_sws_company.pe ?? 0),
                    },
                  ]}
                >
                  {c.crawl_data_sws_company.peForward1y?.toCleanFloatingNumber()}
                </td>
                <td>{c.crawl_data_sws_company.ps?.toCleanFloatingNumber()}</td>
                <td
                  class:list={[
                    {
                      'text-green-600':
                        (c?.crawl_data_sws_company.psForward1y ?? 0) >
                        (c?.crawl_data_sws_company.ps ?? 0),
                    },
                  ]}
                >
                  {c.crawl_data_sws_company.psForward1y?.toCleanFloatingNumber()}
                </td>
                {/* <td>{c.crawl_data_sws_company.snowflakeColor}</td> */}
                <td>
                  {c.crawl_data_sws_company.sharePrice?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.intrinsicValue?.toCleanFloatingNumber()}
                </td>
                <td>{c.crawl_data_sws_company.intrinsicValueModel}</td>
                <td>{c.crawl_data_sws_company.roe?.toCleanFloatingNumber()}</td>
                <td>
                  {c.crawl_data_sws_company.roeFuture3y?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.priceTarget?.toCleanFloatingNumber()}
                </td>
                <td>{c.crawl_data_sws_company.priceTargetAnalystCount}</td>
                <td>
                  {c.crawl_data_sws_company.priceTargetHigh?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.priceTargetLow?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.epsAnnualGrowthRate?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.netIncomeAnnualGrowthRate?.toCleanFloatingNumber()}
                </td>
                <td>{c.crawl_data_sws_company.peerPreferredComparison}</td>
                <td>
                  {c.crawl_data_sws_company.peerPreferredValue?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.dividendPayoutRatio?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.dividendPayoutRatio3Y?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.dividendPayoutRatioMedian3Y?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.dividendPaymentsGrowthAnnual?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.dividendCashPayoutRatio?.toCleanFloatingNumber()}
                </td>
                <td>
                  {c.crawl_data_sws_company.leveredFreeCashFlowAnnualGrowth?.toCleanFloatingNumber()}
                </td>
              </tr>
            );
          })}
        </tbody>
      )
    }
  </table>

  <script is:inline>
    $(document).ready(function () {
      $('#myTable').DataTable({
        paging: false,
        fixedColumns: { left: 1 },
        colReorder: { enable: true },
        fixedHeader: {
          header: true,
        },
        dom: 'Qlfrtip',
      });
      $('#getDetails').on('click', function () {
        stored = $('#myTable').DataTable().searchBuilder.getDetails();
        $('#getDetailsQuery').text(JSON.stringify(stored, null, '\t'));
      });
    });
  </script> -->
</Layout>
