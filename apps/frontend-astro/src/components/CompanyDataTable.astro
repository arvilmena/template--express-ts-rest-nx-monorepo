---
import { CrawlDataSwsCompanyFindAllUnderCategoryReturnType } from '@myawesomeorg/db';
import { luxonToManilaSqlFormat, percentChange } from '@myawesomeorg/utils';
import { randomUUID } from 'crypto';
import { DateTime } from 'luxon';
import CompanyDataTableTd from './CompanyDataTableTd.astro';

interface Props {
  companies: CrawlDataSwsCompanyFindAllUnderCategoryReturnType;
}

const { companies } = Astro.props;
const uniqueId = randomUUID();
---

<button
  id={`btn-get-query-${uniqueId}`}
  class="inline-flex justify-center rounded-md bg-black/20 px-4 py-2 text-sm font-medium text-white hover:bg-black/30 focus:outline-none focus-visible:ring-2 focus-visible:ring-white/75"
  >Get Current Search builder query</button
>
<div id={`btn-get-query-result-${uniqueId}`}></div>
<table id={`data-table-${uniqueId}`} class="display w-full">
  <thead>
    <tr>
      <th class="break-word text-pretty max-w-[180px]">sws Unique Symbol</th>
      <th class="break-word text-pretty max-w-[180px]">last Updated</th>
      <th class="break-word text-pretty max-w-[180px]">Score Total</th>
      <th class="break-word text-pretty max-w-[180px]">score Future</th>
      <th class="break-word text-pretty max-w-[180px]">intrinsic Value</th>
      <th class="break-word text-pretty max-w-[180px]">price Target</th>
      <th class="break-word text-pretty max-w-[180px]">div Yield</th>
      <th class="break-word text-pretty max-w-[180px]">div Yield Future</th>
      <th class="break-word text-pretty max-w-[180px]">pe</th>
      <th class="break-word text-pretty max-w-[180px]">pe Forward1y</th>
      <th class="break-word text-pretty max-w-[180px]">ps</th>
      <th class="break-word text-pretty max-w-[180px]">ps Forward1y</th>
      <th class="break-word text-pretty max-w-[180px]">eps Annual GrowthΔ</th>
      <th class="break-word text-pretty max-w-[180px]"
        >net Income Annual GrowthΔ</th
      >
      <th class="break-word text-pretty max-w-[180px]">roe</th>
      <th class="break-word text-pretty max-w-[180px]">roe Future 3y</th>
      <th class="break-word text-pretty max-w-[180px]">peer Comparison</th>
      <th class="break-word text-pretty max-w-[180px]"
        >dividend Cash Payout Ratio</th
      >
      <th class="break-word text-pretty max-w-[180px]">dividend Payout Ratio</th
      >
      <th class="break-word text-pretty max-w-[180px]"
        >dividend Payout Ratio 3Y</th
      >
      <th class="break-word text-pretty max-w-[180px]"
        >dividend Payout Ratio Median3Y</th
      >
      <th class="break-word text-pretty max-w-[180px]"
        >dividend Payments Growth Annual</th
      >
      <th class="break-word text-pretty max-w-[180px]"
        >levered Free Cash Flow Annual Growth</th
      >
    </tr>
  </thead>
  {
    companies.length > 0 && (
      <tbody>
        {companies.map((c) => {
          return (
            <tr>
              <td data-tooltip={c.crawl_data_sws_company.swsId}>
                {c.crawl_data_sws_company.swsUniqueSymbol}
              </td>
              <td>
                {luxonToManilaSqlFormat(
                  DateTime.fromMillis(
                    Number(c.crawl_data_sws_company.swsDataLastUpdated),
                  ),
                )}
              </td>
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.scoreScoreTotal}
              >
                <span>{c.crawl_data_sws_company.scoreScoreTotal}</span>
                <br />
                <small>{c.crawl_data_sws_company.scoreSentence}</small>
              </CompanyDataTableTd>
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.scoreFuture}
              />
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.intrinsicValueDiscount}
                isPercentage={true}
                compare={{ vs: 0 }}
              >
                {c.crawl_data_sws_company.intrinsicValueDiscount &&
                  c.crawl_data_sws_company.intrinsicValue && (
                    <Fragment>
                      <span
                        class:list={[
                          'inline-flex justify-center items-center mx-auto w-full',
                          {
                            'text-green-600':
                              (c.crawl_data_sws_company.intrinsicValue ?? 0) >
                              (c.crawl_data_sws_company.sharePrice ?? 0),
                            'text-red-600':
                              (c.crawl_data_sws_company.intrinsicValue ?? 0) <
                              (c.crawl_data_sws_company.sharePrice ?? 0),
                          },
                        ]}
                      >
                        {(
                          c.crawl_data_sws_company.intrinsicValueDiscount * 100
                        ).toCleanFloatingNumber()}
                        %
                      </span>
                      <br />
                      <small>
                        Current: Php {c.crawl_data_sws_company.sharePrice}
                      </small>
                      <br />
                      <small>
                        Intrinsic: Php{' '}
                        {c.crawl_data_sws_company.intrinsicValue.toCleanFloatingNumber()}
                      </small>
                      <br />
                      <small>
                        Model: {c.crawl_data_sws_company.intrinsicValueModel}
                      </small>
                    </Fragment>
                  )}
              </CompanyDataTableTd>
              <CompanyDataTableTd
                value={percentChange(
                  c?.crawl_data_sws_company.sharePrice,
                  c?.crawl_data_sws_company.priceTarget,
                )}
              >
                {c.crawl_data_sws_company.priceTarget && (
                  <span
                    class:list={[
                      'inline-flex justify-center items-center mx-auto w-full',
                      {
                        'text-green-600':
                          (c.crawl_data_sws_company.priceTarget ?? 0) >
                          (c.crawl_data_sws_company.sharePrice ?? 0),
                        'text-red-600':
                          (c.crawl_data_sws_company.priceTarget ?? 0) <
                          (c.crawl_data_sws_company.sharePrice ?? 0),
                      },
                    ]}
                  >
                    Php{' '}
                    {c.crawl_data_sws_company.priceTarget?.toCleanFloatingNumber()}
                    <br />(
                    {percentChange(
                      c?.crawl_data_sws_company.sharePrice,
                      c?.crawl_data_sws_company.priceTarget,
                    )?.toFixed(2)}
                    %)
                  </span>
                )}
                {c.crawl_data_sws_company.priceTarget && (
                  <Fragment>
                    <br />
                    <small class="inline-flex justify-center items-center mx-auto w-full">
                      High: Php{' '}
                      {c.crawl_data_sws_company.priceTargetHigh?.toCleanFloatingNumber()}
                      <br />
                      Low: Php{' '}
                      {c.crawl_data_sws_company.priceTargetLow?.toCleanFloatingNumber()}
                      AnalystCount:{' '}
                      {c.crawl_data_sws_company.priceTargetAnalystCount}
                    </small>
                  </Fragment>
                )}
              </CompanyDataTableTd>
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.dividendYield}
                isPercentage={true}
              />
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.dividendYieldFuture}
                isPercentage={true}
                compare={{
                  vs: c?.crawl_data_sws_company.dividendYield,
                  operator: '>',
                  showPercentDifference: { initial: 'vs' },
                }}
              />

              <CompanyDataTableTd value={c?.crawl_data_sws_company.pe} />
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.peForward1y}
                compare={{
                  vs: c?.crawl_data_sws_company.pe,
                  operator: '>',
                  showPercentDifference: { initial: 'vs' },
                  sortViaPercentDifference: true,
                }}
              />
              <CompanyDataTableTd value={c?.crawl_data_sws_company.ps} />
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.psForward1y}
                compare={{
                  vs: c?.crawl_data_sws_company.ps,
                  operator: '>',
                  showPercentDifference: { initial: 'vs' },
                  sortViaPercentDifference: true,
                }}
              />
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.epsAnnualGrowthRate}
                isPercentage={true}
                compare={{ vs: 0 }}
              />
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.netIncomeAnnualGrowthRate}
                isPercentage={true}
                compare={{ vs: 0 }}
              />

              <CompanyDataTableTd value={c?.crawl_data_sws_company.roe} />
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.roeFuture3y}
                compare={{
                  vs: c?.crawl_data_sws_company.roe,
                  operator: '>',
                  showPercentDifference: { initial: 'vs' },
                  sortViaPercentDifference: true,
                }}
              />
              {/** <td>
                {c.crawl_data_sws_company.priceTarget?.toCleanFloatingNumber()}
              </td> */}
              {() => {
                const peerPreferredComparison =
                  c.crawl_data_sws_company.peerPreferredComparison;
                let _vs = c?.crawl_data_sws_company.peerPreferredValue;
                let _value: number | null = null;
                switch (peerPreferredComparison) {
                  case 'pe':
                    _value = c?.crawl_data_sws_company.pe;
                    break;
                  case 'ps':
                    _value = c?.crawl_data_sws_company.ps;
                    break;
                  case 'pb':
                    _value = c?.crawl_data_sws_company.pb;
                    break;
                }
                let percentDifference: number | null = null;
                if (_vs && _value) {
                  percentDifference = percentChange(_value, _vs);
                }
                const percentDifferenceDisplay = percentDifference
                  ? `${percentDifference.toFixed(2)}%`
                  : null;
                return (
                  <CompanyDataTableTd
                    value={_value}
                    compare={{
                      vs: _vs,
                      operator: '>',
                      showPercentDifference: { initial: 'vs' },
                      sortViaPercentDifference: true,
                    }}
                  >
                    {percentDifferenceDisplay && percentDifference && (
                      <Fragment>
                        <span
                          class:list={[
                            'inline-flex justify-center items-center mx-auto w-full',
                            {
                              'text-green-600': percentDifference > 0,
                              'text-red-600': percentDifference < 0,
                            },
                          ]}
                        >
                          {percentDifferenceDisplay}
                        </span>
                        <br />
                        <small>
                          {c.crawl_data_sws_company.peerPreferredComparison?.toUpperCase()}
                        </small>
                        <br />
                        <small>value: {_value?.toCleanFloatingNumber()}</small>
                        <br />
                        <small>
                          peers:{' '}
                          {c.crawl_data_sws_company.peerPreferredValue?.toCleanFloatingNumber()}
                        </small>
                      </Fragment>
                    )}
                  </CompanyDataTableTd>
                );
              }}
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.dividendCashPayoutRatio}
                isPercentage={true}
                compare={{
                  operator: 'between',
                  betweenInitial: 0,
                  betweenFinal: 0.9,
                }}
              />

              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.dividendPayoutRatio}
                isPercentage={true}
                compare={{
                  operator: 'between',
                  betweenInitial: 0,
                  betweenFinal: 1,
                }}
              />
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.dividendPayoutRatio3Y}
                isPercentage={true}
                compare={{
                  operator: 'between',
                  betweenInitial: 0,
                  betweenFinal: 1,
                }}
              />
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.dividendPayoutRatioMedian3Y}
                isPercentage={true}
              />
              <CompanyDataTableTd
                value={c?.crawl_data_sws_company.dividendPaymentsGrowthAnnual}
                isPercentage={true}
                compare={{ vs: 0 }}
              />
              <CompanyDataTableTd
                value={
                  c?.crawl_data_sws_company.leveredFreeCashFlowAnnualGrowth
                }
                isPercentage={true}
              />
            </tr>
          );
        })}
      </tbody>
    )
  }
</table>

<script is:inline define:vars={{ uniqueId }}>
  $(document).ready(function () {
    $('#' + `data-table-${uniqueId}`).DataTable({
      paging: false,
      fixedColumns: { left: 1 },
      colReorder: { enable: true },
      fixedHeader: {
        header: true,
      },
      dom: 'QBlfrtip',
      scrollX: true,
      buttons: [
        {
          extend: 'columnVisibility',
          text: 'Show all',
          visibility: true,
        },
        'colvis',
        {
          extend: 'columnVisibility',
          text: 'Hide all',
          visibility: false,
        },
      ],
      // searchBuilder: {
      //   columns: [1, 3, 5], // symbol, score description, intrinsic value model
      // },
      // columnDefs: [
      //   { searchable: false, targets: 2 },
      //   { searchable: false, targets: 4 },
      //   { searchable: false, targets: 6 },
      // ],
    });
    $('#' + `btn-get-query-${uniqueId}`).on('click', function () {
      stored = $('#' + `data-table-${uniqueId}`)
        .DataTable()
        .searchBuilder.getDetails();
      $('#' + `btn-get-query-result-${uniqueId}`).text(
        JSON.stringify(stored, null, '\t'),
      );
    });
  });
</script>
